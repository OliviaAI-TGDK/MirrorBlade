cmake_minimum_required(VERSION 3.20)
project(MirrorBladeBridge LANGUAGES CXX)

# -----------------------------
# Global C++ settings
# -----------------------------
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)

# -----------------------------
# Optional: FidelityFX FSR2
# -----------------------------
option(WITH_FSR2 "Build with FidelityFX FSR2 support" OFF)
set(FSR2_ROOT "" CACHE PATH "Root directory containing FSR2 headers/libs (optional)")

# -----------------------------
# Sources
# -----------------------------
set(SRC_FILES
    src/main.cpp
    src/Bridge.cpp
    src/MBState.cpp
    src/OpsHelpers.cpp
    src/MirrorBladeBridge.cpp
    src/Upscaler_FSR2.cpp
    src/RenderHook.cpp
    src/Plugin.cpp
    src/MirrorBladeOps.cpp
    src/MBIPC.cpp
    src/MBFeatures.cpp
    src/MirrorBladeInstance.cpp
    src/TGDKOps.cpp
    src/MBLog.cpp
    src/MBConfig.cpp
    src/TGDKFigure8Fold.cpp
    src/VolumetricInfinitizer.cpp
    src/Duo.cpp
    src/TGDKLoader.cpp
    src/Trinity.cpp
    src/M4qXE.cpp
    src/GoldenVajra.cpp
    src/Sword.dox.cpp
    src/LoomisUnderfold.cpp
    src/LogisticalValveExports.cpp
    src/FireOverplayTower.cpp
    src/AILLTUO.cpp
    src/Detox.cpp
    src/RecoveryInterfold.cpp
    src/LightFilter.cpp
    src/OpsLightFilter.cpp
)

add_library(MirrorBladeBridge SHARED ${SRC_FILES} "src/LightFilter_impl.cpp" "src/OpsCore.cpp" "src/TGDKTelemetry.cpp" "src/5Col6Dex.cpp" "src/Visceptar.cpp" "src/Scooty.cpp")

# -- Project-wide detox header (auto-generated) + include path (ASCII only) --
set(MB_GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/generated")
file(MAKE_DIRECTORY "${MB_GENERATED_DIR}")

set(MB_DETOX_BASENAME "WinMacroCleanse.h")
set(MB_DETOX_HDR "${MB_GENERATED_DIR}/${MB_DETOX_BASENAME}")
file(WRITE "${MB_DETOX_HDR}" "/* WinMacroCleanse.h - auto-generated by CMake; ASCII only */
#ifdef string
#  undef string
#endif
#ifdef small
#  undef small
#endif
#ifdef uuid
#  undef uuid
#endif
#ifdef hyper
#  undef hyper
#endif
#ifdef min
#  undef min
#endif
#ifdef max
#  undef max
#endif
#ifdef interface
#  undef interface
#endif
#ifdef near
#  undef near
#endif
#ifdef far
#  undef far
#endif
#ifdef function
#  undef function
#endif
#ifdef Handler
#  undef Handler
#endif
")

target_include_directories(MirrorBladeBridge PRIVATE
  ${CMAKE_CURRENT_SOURCE_DIR}/src
  ${CMAKE_CURRENT_SOURCE_DIR}/include
  ${RED4EXT_SDK}/include
  ${MB_GENERATED_DIR}
)


# MSVC options (single /FI, basename only)
if(MSVC)
  target_compile_options(MirrorBladeBridge PRIVATE
    /permissive- /Zc:__cplusplus /EHsc /bigobj /MP /utf-8
    /FIWinMacroCleanse.h
    /wd4828               # silence illegal-char warnings now that detox is ASCII
  )
endif()

set(MB_PROBE_BASENAME "WinMacroProbe.h")
set(MB_PROBE_HDR "${MB_GENERATED_DIR}/${MB_PROBE_BASENAME}")
file(WRITE "${MB_PROBE_HDR}" "/* WinMacroProbe.h - ASCII */
#ifdef string
#  error \"The macro 'string' is defined before system headers. Check includes in this TU.\"
#endif
#ifdef small
#  error \"The macro 'small' is defined before system headers. Check includes in this TU.\"
#endif
")

if(MSVC)
  target_compile_options(MirrorBladeBridge PRIVATE
    /FIWinMacroProbe.h
  )
endif()



# -----------------------------
# Win32 + MSVC settings
# -----------------------------
target_compile_definitions(MirrorBladeBridge PRIVATE
  UNICODE _UNICODE WIN32_LEAN_AND_MEAN NOMINMAX NORPC
)

if(MSVC)
  target_compile_options(MirrorBladeBridge PRIVATE
    /permissive- /Zc:__cplusplus /EHsc /bigobj /MP /utf-8
    /FIWinMacroCleanse.h           # <— basename only; no quotes, no path
  )
endif()
# -----------------------------
# FSR2 (optional)
# -----------------------------
if(WITH_FSR2)
  # Try to find headers and lib using FSR2_ROOT or env:FSR2_ROOT
  find_path(FSR2_INCLUDE_DIR
    NAMES ffx_fsr2_api.h ffx_fsr2.h
    HINTS "${FSR2_ROOT}" "$ENV{FSR2_ROOT}"
    PATH_SUFFIXES include
  )

  find_library(FSR2_LIB
    NAMES ffx_fsr2_api_x64 ffx_fsr2_api
    HINTS "${FSR2_ROOT}" "$ENV{FSR2_ROOT}"
    PATH_SUFFIXES lib lib/x64
  )

  if(FSR2_INCLUDE_DIR AND FSR2_LIB)
    target_include_directories(MirrorBladeBridge PRIVATE "${FSR2_INCLUDE_DIR}")
    target_link_libraries(MirrorBladeBridge PRIVATE "${FSR2_LIB}")
    target_compile_definitions(MirrorBladeBridge PRIVATE WITH_FSR2=1)
    message(STATUS "FSR2 enabled: include=${FSR2_INCLUDE_DIR}, lib=${FSR2_LIB}")
  else()
    message(WARNING "WITH_FSR2=ON but FSR2 not found. Set FSR2_ROOT (or env FSR2_ROOT) to a folder containing /include and /lib.")
  endif()
endif()

# -----------------------------
# Link libraries
# -----------------------------
target_link_libraries(MirrorBladeBridge PRIVATE
  advapi32
  ws2_32
  d3d12
  dxgi
)

# -----------------------------
# PCH handling for MBTypeReg.cpp (if your toolchain injects /Yu)
# -----------------------------
set_source_files_properties(src/MBTypeReg.cpp PROPERTIES SKIP_PRECOMPILE_HEADERS ON)
if(MSVC)
  set_source_files_properties(src/MBTypeReg.cpp PROPERTIES COMPILE_OPTIONS "/Y-")
endif()

# -----------------------------
# Output name
# -----------------------------
set_target_properties(MirrorBladeBridge PROPERTIES OUTPUT_NAME "MirrorBladeBridge")

# -----------------------------
# (Optional) tidy source groups in IDEs
# -----------------------------
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SRC_FILES})
